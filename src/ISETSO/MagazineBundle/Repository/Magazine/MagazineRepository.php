<?php

namespace ISETSO\MagazineBundle\Repository\Magazine;

/**
 * MagazineRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class MagazineRepository extends \Doctrine\ORM\EntityRepository
{

    /**
     * @return array
     */
    public function getStock($id)
    {
        return  $this->_em->createQuery(
        "SELECT sd.price AS price,
                sum(j_detail.quantity) AS qte,
                article.id AS id_article,
                article.designation AS article_name,
                sfa.designation AS subFamily,
                fa.designation AS family, 
                un.designation AS unit ,
            (SELECT sum(d_detail.quantity) 
            FROM 
                ISETSOMagazineBundle:Magazine\MagazineDischarge d
                JOIN d.detail d_detail
                JOIN d_detail.supportingDocument d_sd
                JOIN d_sd.article d_article
                JOIN d.toSubStore d_store
            WHERE 
              d.etat = 'a' AND d_article.id = id_article AND d_store.id = :store_id
            GROUP BY d_article.id) as discharge ,
            (SELECT sum(r_detail.quantity) 
            FROM 
                ISETSOMagazineBundle:ArticleManagement\ReturnArticleToSubStore r
                JOIN r.detail r_detail
                JOIN r_detail.supportingDocument r_sd
                JOIN r_sd.article r_article
                JOIN r.toSubStore r_store
            WHERE 
              r.etat = 'a' AND r_article.id = id_article AND r_store.id = :store_id
            GROUP BY r_article.id) as returned 
        FROM 
            ISETSOMagazineBundle:ArticleManagement\DischargeArticleToMagazine j 
            JOIN j.detail j_detail
            JOIN j_detail.supportingDocument sd
            JOIN sd.article article
            JOIN article.subFamily sfa
            JOIN sfa.family fa
            JOIN article.unit un
            JOIN j.toMagazine j_store
        WHERE 
            j.etat = 'a' AND j_store.id = :store_id
        GROUP BY article.id" )
        ->setParameter('store_id', $id)
        ;
    }

	/**
     * @return Query
     */
    public function findAll()
    {
        return $this->createQueryBuilder('f')
                    ->join('f.user', 'u');
    }

    

    /**
     * @param \ISETSO\UserBundle\Entity\User\User $user
     * @return Query
     */
    public function findByUser($user)
    {
        return $this->createQueryBuilder('f')
                        ->join('f.user', 'u')
                        ->where('u.id = :id')
                        ->setParameter('id',$user->getId());
    }

    /**
     * @param String $field
     * @param \ISETSO\UserBundle\Entity\User\User $user
     * @return Query
     */
    public function findByAnything($query , $field)
    {
        return  $query->andWhere('f.id like :search OR f.designation LIKE :search OR u.username LIKE :search')
                    ->setParameter('search', '%'.$field.'%')
                    ->orderBy('f.id', 'ASC');
    }
}

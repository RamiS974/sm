<?php

namespace ISETSO\MagazineBundle\Repository\ArticleManagement;


/**
 * DischargeArticleToUserRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class DischargeArticleToUserRepository extends \Doctrine\ORM\EntityRepository
{
    
    /**
     * @return array
     */
    public function getStockFromDischarge()
    {
        return $this->createQueryBuilder('r')
                        ->select('sum(d.quantity) as quantity , a.id as article_id , a.designation as article_name , u.designation as unit , us.username as user')
                        ->join('r.detail' , 'd' )
                        ->join('d.article' , 'a')
                        ->join('a.unit' , 'u')
                        ->join('r.toUser','us')
                        ->where('r.etat = :etat')
                        ->setParameter('etat', "a")
                        ->groupBy('d.article')
                        ->getQuery()
                        ->getResult()
                        ;
    }

    /**
     * @param \ISETSO\UserBundle\Entity\User\User $user
     * @return Query
     */
    public function findDischargeByUser($user)
    {
        return $this->createQueryBuilder('f')
                        ->join('f.toUser', 'toU')
                        ->where('toU.id = :id')
                        ->setParameter('id',$user->getId())
                        ->andWhere('f.etat = :etat')
                        ->setParameter('etat', "a")
                        ->orderBy('f.date', 'ASC')
                        ->getQuery()
                        ->getResult()
                        ;
    }

    /**
     * @param \ISETSO\UserBundle\Entity\User\User $user
     * @param int $inventoryNumber
     * @return Query
     */
    public function findDischargeByUserAndSupportingDoc($user,$id)
    {
        return $this->createQueryBuilder('f')
                        ->select('sum(s.quantity) as quantity')

                        ->join('f.toUser', 'toU')
                        ->join('f.detail' , 'd' )
                        ->join('d.supportingDocument' , 's')
                        
                        ->where('toU.id = :id')
                        ->setParameter('id',$user->getId())
                        
                        ->andWhere('f.etat = :etat')
                        ->setParameter('etat', "a")
                        
                        ->andWhere('s.id = :idSupp')
                        ->setParameter('idSupp', $id)

                        ->groupBy('s.id')
                        ->orderBy('f.date', 'ASC')
                        ->getQuery()
                        ->getOneOrNullResult()
                        ;
    }

	/**
     * @return Query
     */
    public function findAll()
    {
        return $this->createQueryBuilder('f')
                    ->join('f.user', 'u');
    }

    /**
     * @param \ISETSO\UserBundle\Entity\User\User $user
     * @return Query
     */
    public function findByUser($user)
    {
        return $this->createQueryBuilder('f')
                        ->join('f.user', 'u')
                        ->where('u.id = :id')
                        ->setParameter('id',$user->getId())
                        ->orderBy('f.date', 'ASC');
    }

    /**
     * @param String $field
     * @param \ISETSO\UserBundle\Entity\User\User $user
     * @return Query
     */
    public function findByAnything($query , $field)
    {
        return  $query->andWhere('f.id like :search OR f.etat LIKE :search OR f.date LIKE :search OR f.observation LIKE :search OR u.username LIKE :search')
                    ->setParameter('search', '%'.$field.'%')
                    ->orderBy('f.id', 'ASC');
    }

    /**
     * @param date $startDate
     * @param date $endDate
     * @param Query $query
     * @return Query
     */
    public function findBetween($query , $startDate , $endDate)
    {
        return  $query->andWhere('f.dateEntre BETWEEN :startDate AND :endDate')
                        ->setParameter('startDate', $startDate)
                        ->setParameter('endDate', $endDate)
                        ->orderBy('f.id', 'DESC');
    }

    
}

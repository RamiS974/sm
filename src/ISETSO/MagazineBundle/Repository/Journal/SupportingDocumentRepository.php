<?php

namespace ISETSO\MagazineBundle\Repository\Journal;

/**
 * SupportingDocumentRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class SupportingDocumentRepository extends \Doctrine\ORM\EntityRepository
{
    /**
     * @return null|String
     */
	public function getLastInventoryNumber()
    {
    	return	$query = $this->createQueryBuilder('a')
                                ->select("max(a.inventoryNumber) as inventoryNumber")
                                ->getQuery()
                                ->getOneOrNullResult();
    	
    }

    /**
     * @param String $inventoryNumber
     * @return null|String
     */
    public function isUniqueInventoryNumber($inventoryNumber)
    {
        return  $query = $this->createQueryBuilder('a')
                                ->select("a.inventoryNumber")
                                ->where('a.inventoryNumber = :inventoryNumber')
                                ->setParameter('inventoryNumber',$inventoryNumber)
                                ->getQuery()
                                ->getOneOrNullResult();
        
    }

    /**
     * @param int $id
     * @return array
     */
    public function getSupportingDocumentByArticle($id)
    {
        return  $query = $this->createQueryBuilder('a')
                                ->select("a.inventoryNumber as text , a.id as id , a.quantity as qte")
                                ->join('a.article' , 'ar')
                                ->where('ar.id = :id')
                                ->setParameter('id',$id)
                                 ->join('a.journal', 'j')
                                ->andWhere('j.type = :type')
                                ->setParameter('type', "Stock")
                                ->getQuery()
                                ->getResult();
        
    }

    /**
     * @return Query
     */
    public function findAll()
    {
        return $this->createQueryBuilder('f')
                    ->join('f.article' , 'a')
                    ->join('a.subFamily','sf')
                    ->join('sf.family','fa')
                    ->join('a.unit','u')
                    ->join('f.journal', 'j');
    }

    /**
     * @return Query
     */
    public function findAllStock()
    {
        return $this->createQueryBuilder('f')
                    ->join('f.article' , 'a')
                    ->join('a.subFamily','sf')
                    ->join('sf.family','fa')
                    ->join('a.unit','u')
                    ->join('f.journal', 'j')
                    ->groupBy('a.id')
                    ->where('j.type = :type')
                    ->setParameter('type', "Stock");
    }

    /**
     * @param String $field
     * @param \ISETSO\UserBundle\Entity\User\User $user
     * @return Query
     */
    public function findByAnything($query , $field)
    {
        return  $query->andWhere('f.inventoryNumber like :search 
                                    OR a.designation LIKE :search 
                                    OR f.price LIKE :search 
                                    OR f.quantity LIKE :search
                                    OR sf.designation LIKE :search 
                                    OR fa.designation LIKE :search
                                    OR u.designation LIKE :search')
                    ->setParameter('search', '%'.$field.'%')
                    ->orderBy('f.id', 'DESC');
    }

    /**
     * @param date $startDate
     * @param date $endDate
     * @param Query $query
     * @return Query
     */
    public function findBetween($query , $startDate , $endDate)
    {
        return  $query->andWhere('j.dateEntre BETWEEN :startDate AND :endDate')
                        ->setParameter('startDate', $startDate)
                        ->setParameter('endDate', $endDate)
                        ->orderBy('f.id', 'DESC');
    }
}
